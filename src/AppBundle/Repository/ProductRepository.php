<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
	public function findAllOrderedByName()
    {
		$qb = $this->getEntityManager()->createQueryBuilder();        
		$qb	->select('p')
			->from('AppBundle:Product','p')
			->orderBy('p.name');
		
        return $qb->getQuery()->getResult();
    }
	
	public function findMinPrice()
    {
		$qb = $this->getEntityManager()->createQueryBuilder();
		$qb	->select('min(p.price)')
			->from('AppBundle:Product', 'p');
		
		return $qb->getQuery()->getSingleScalarResult();
    }
	
	public function findMaxPrice()
    {
		$qb = $this->getEntityManager()->createQueryBuilder();
		$qb	->select('max(p.price)')
			->from('AppBundle:Product', 'p');
		
		return $qb->getQuery()->getSingleScalarResult();
    }
	
	
	
	public function findByFilter($category, $minPrice, $maxPrice, $existence)
    {
		$qb = $this->getEntityManager()->createQueryBuilder();
        
		$where = 'p.price between :min and :max'; 
		$params = array('min' => $minPrice, 'max' => $maxPrice);
				
		$qb	->select('p')
			->from('AppBundle:Product','p');
				  
		if ($existence) {
			$qb->join('p.material','m');
			$where = $where.' and p.quantity <= m.quantity';
		}
		
		if ($category) {
			$qb->join('p.category','c');
			$where = $where.' and c=:category';	
			$params['category'] = $category;
		}
		
		$qb ->where($where)
			->orderBy('p.name')
			->setParameters($params);
		   
	   return $qb->getQuery()->getResult();
		   
    }
}
